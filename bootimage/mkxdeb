#!/bin/zsh -f

DEB_SOURCE=/usr/src/DEB
TARGET=/usr/src/j820/deb
TARGET_ARCH=arm
DEBIAN_MIRROR=http://ftp.us.debian.org/debian
#DEBIAN_DISTRIBUTION=sid
DEBIAN_DISTRIBUTION=etch
#DEBIAN_DISTRIBUTION=sarge
MNT=/mnt

PACKAGE_SELECTION () {
  PACKAGES=(
    $BASE_PACKAGES
#) FOO=(
    $DEV_PACKAGES
    $CONSOLE_PACKAGES
    $X11_PACKAGES
    $EDITOR_PACKAGES
    # COMMON_LISP_PACKAGES
    # $GAME_PACKAGES
    # $SOUND_PACKAGES
    # $USB_PACKAGES
  )
}
REMOTE_DIRS=(
/debootstrap
/usr/doc
/usr/info
#/usr/man
/usr/share/doc
/usr/share/info
#/usr/share/man
/usr/src
/var/cache/apt
/var/cache/debconf
/var/cache/localepurge
/var/lib/apt
/var/lib/dpkg
)

### obtained by removing the --include statement from bootstrap () then
### ./mkxdeb bootstrap |& tee zap
### A=( $( cat zap | grep Extracting | cut -c 15- | sed -e 's/...$//' ) )
BASE_DEBIAN_PACKAGES=(
base-files
base-passwd
bash
bsdutils
coreutils
debconf
debconf-i18n
debianutils
diff
dpkg
e2fslibs
e2fsprogs
findutils
gcc-3.3-base
grep
gzip
hostname
initscripts
libacl1
libattr1
libblkid1
libc6
libcap1
libcomerr2
libdb1-compat
libdb3
libgcc1
liblocale-gettext-perl
libncurses5
libnewt0.51
libpam-modules
libpam-runtime
libpam0g
libss2
libstdc++5
libtext-charwidth-perl
libtext-iconv-perl
libtext-wrapi18n-perl
libuuid1
login
makedev
mawk
mount
ncurses-base
ncurses-bin
passwd
perl-base
procps
sed
slang1a-utf8
sysv-rc
sysvinit
tar
util-linux
zlib1g
# Missing: libslang2
)

BOOTSTRAP_PACKAGES=(
#$BASE_DEBIAN_PACKAGES
apt less dialog debconf
)
BASE_PACKAGES=(
#aptitude- fdutils-

less gnupg ksymoops
ntpdate ntp

screen zsh ssh gnutls-bin telnet
recode
lynx ca-certificates
w3m w3m-img # w3mmee w3mmee-img
bzip2 gzip tar rsync

dpkg
dialog apt
localeconf localepurge locales localization-config

sudo m4

procps psmisc

pump
mount
module-init-tools devfsd udev
e2fsprogs
# reiserfs-tools
nfs-kernel-server nfs-common
gpm

pcmcia-cs wireless-tools
# irda-utils gpsman cu ppp xawtv-tools xawtv
)
CONSOLE_PACKAGES=(
console-tools
fbset
# fbiterm
fbi
# fbgetty

# microwindows-fb
# dvifb
)
DEV_PACKAGES=(
man # groff
units mtr-tiny tcpdump symlinks traceroute
cruft
apt-utils apt-file
diff patch wdiff cvs subversion xdelta
cvsutils strace
make
imagemagick
# ocaml
)
X11_PACKAGES=(
xserver-xorg
x-window-system-core
xpdf
xterm
xlibs-data
qiv
ratpoison
ttf-bitstream-vera
xfonts-base xfonts-75dpi xfonts-100dpi # xfonts-jmk
# mlterm mlterm-tiny
)
EDITOR_PACKAGES=(
xemacs21
dict dictd
dict-foldoc dict-gcide dict-wn dict-moby-thesaurus
dict-freedict-eng-fra dict-freedict-fra-eng
aspell aspell-bin aspell-fr aspell-en
ispell
)

COMMON_LISP_PACKAGES=(
clisp common-lisp-controller
#gcl

cl-ppcre
cl-pdf

cl-acl-compat
cl-aima
cl-ansi-tests
cl-asdf
cl-aserve
cl-base64
cl-binary-types
cl-blowfish
cl-ftp
cl-gd
cl-getopt
cl-htmlgen
cl-inflate
cl-interpol
cl-irc
cl-irc-logger
cl-jpeg
cl-kmrcl
cl-lml2
cl-md5
cl-memoization
cl-meta
cl-menusystem
cl-net-telent-date
cl-paip
cl-parse-number
cl-pipes
cl-plus
cl-png
cl-puri
cl-readline
cl-quick-arrays
cl-rsm-memo
cl-rsm-mod
cl-rsm-modal
cl-rsm-queue
cl-rsm-bitcomp
cl-rsm-bool-comp
cl-rsm-cache
cl-rsm-delayed
cl-rsm-filter
cl-rsm-finance
cl-rsm-fuzzy
cl-rsm-gen-prog
cl-rsm-genetic-alg
cl-rsm-rand
cl-rsm-rsa
cl-rsm-rand
cl-rsm-string
cl-rss
cl-screamer
cl-scribble
cl-split-sequence
cl-ssl
cl-syslog
cl-ubf
cl-uffi
cl-units
cl-unit
cl-webactions
cl-who
cl-xlunit
cl-xptest
cl-xmls

#cl-faq
#cl-infix
cl-metering
#lush
#lush-library
# maxima
#cl-hyperspec
#cl-onlisp-code
#cltl
)
GAME_PACKAGES=(
fortune-mod fortune-min
doom-wad-shareware doomlegacy-sdl
# prboom lxdoom
# recompile: rocks-n-diamonds
# gnuboy
# vice
)
USB_PACKAGES=(
usbmgr usbutils
)
SOUND_PACKAGES=(
madplay sox aumix
)

MY_CONFIG=(
/etc/inittab		# save memory, don't open VTs
/etc/gpm.conf		# configure the mouse
/etc/X11/XF86Config-4	# got the mode with fbset -x; DontVTSwitch because it hoses the kbd_mode
/etc/X11/vtinit.sh	# let X change kbd_mode -k
/etc/X11/Xmodmap	# US modmap in -k mode. Plus exchange mouse buttons 2 and 3.
/etc/fb.modes		# got the mode with fbset
/etc/sudoers		# allow users to use kbd_mode
/etc/syslog.conf	# log to vt10, not to precious small CF.
/etc/init.d/klogd	# use flag -c 1 to avoid annoying messages
/etc/pcmcia/config.opts	# remove the PC-specific crap
# xinitrc		# xterm +sb -geometry 1x1 -e sudo kbd_mode -k ; xmodmap /etc/X11/Xmodmap

#/etc/resolv.conf
#/etc/hosts
#/etc/hostname
#/etc/issue
#/etc/passwd
#/etc/group
#/etc/ssh/id*
#/etc/default/dictd
#/etc/network/interfaces

)

setup_remote_dirs () {
  for i ; do
    i=${i%/} ; i=${i#/}
    b=$(dirname /$i)
    j=$(echo $b | sed -e 's,/[^/]\+,..\/,g ; s,^[./]$,,')
    mkdir -p ${TARGET}$b
    if [ -L $i ] ; then
      rm $i
      mkdir -p remote/$i
    elif [ -d $i ] ; then
      mkdir -p remote/$b
      mv $i remote/$b/
    else
      mkdir -p remote/$i
    fi
    ln -s ${j}remote/$i ${TARGET}/$i
  done
}

setup_directories () {
  mkdir -p $TARGET
  cd $TARGET || ABORT "Create and mount target directory $TARGET first!"
  setup_remote_dirs $REMOTE_DIRS
  mkdir -p remote/var/lib/apt/lists/partial
}

configure_xemacs () {
  ./configure --compiler='distcc arm-linux-gcc' --cflags="-Os -fomit-frame-pointer" --with-x11=no --with-sound=no --with-database=no --with-tty=yes --with-ipv6-cname=no --pdump=no --with-gnome=no --with-gtk=no --with-toolbars=no --with-wmcommand=no --with-menubars=no --with-scrollbars=no --with-dialogs=no --with-widgets=no --with-dragndrop=no --with-cde=no --with-offix=no --with-xmu=no --external-widget=no --with-ncurses --with-gpm --with-kerberos=no --with-pop=no --with-hesiod=no --with-workshop=no --with-socks=no --with-modules=no --with-netinstall=no --with-mule=no --with-xfs=no

# For a minimal distribution, use uclibc, too?

# Detect which files to copy on a minimal distribution:
# strace -eopen -o foo xemacs -q -f kill-emacs
# cat foo | grep -v SIG | grep -v ' = -' | cut -d\" -f2 | grep -v '/$' | sort -u > bar
}

used_libs () {
  for i ; do
    ldd $i | cut -d'>' -f2 | cut -d' ' -f2
  done | sort -u
}

make_qemu_arm () {
  cd $DEB_SOURCE
  apt-get source qemu
  cd ./qemu-*
  ./configure --static --target-list=arm-user
  make
  cp arm-user/qemu-arm /usr/local/bin/
  ln -s /usr/local/bin/qemu-arm /usr/bin/
}
install_qemu_arm () {
  mkdir -p $TARGET/remote $TARGET/usr/bin/ $TARGET/usr/local/bin/
  cp /usr/local/bin/qemu-arm $TARGET/remote/
  ln -s ../../remote/qemu-arm $TARGET/usr/bin/
  ln -s ../../../remote/qemu-arm $TARGET/usr/local/bin/
}

register_qemu_arm () {
  if [ -f /proc/sys/fs/binfmt_misc/arm ] ; then
    echo qemu-arm already registered to binfmt_misc
    return 0
  fi
  /bin/echo ':arm:M::\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfb\xff\xff\xff:/usr/bin/qemu-arm:' > /proc/sys/fs/binfmt_misc/register
}

bootstrap () {
OPTS=(
#	--download-only
	--foreign
	--arch $TARGET_ARCH
	--include=${(pj:,:)BOOTSTRAP_PACKAGES} # BASE_PACKAGES
	--resolve-deps
	sarge # $DEBIAN_DISTRIBUTION
	$TARGET
	$DEBIAN_MIRROR
) ; echo debootstrap $@ $OPTS ;
debootstrap $@ $OPTS
}

extract_deb () {
  cd $TARGET
  for i ; do
    dpkg-deb --extract $i $TARGET
  done
}
find_downloaded_debs () {
  cut -d' ' -f2 $TARGET/debootstrap/debpaths
}
extract_downloaded_debs () {
  extract_deb $(find_downloaded_debs)
}

setup_sources.list () {
  echo "deb http://ftp.us.debian.org/debian $DEBIAN_DISTRIBUTION main non-free" > $TARGET/etc/apt/sources.list
}

APT_OPTIONS=(
--option Dir::Etc::SourceList=$TARGET/etc/apt/sources.list --option Dir::State::Lists=$TARGET/var/lib/apt/lists --option Debug::Nolocking=true --option APT::Architecture=$TARGET_ARCH --option Dir::Cache::archives=$TARGET/var/cache/apt/archives --option APT::Get::Force-Yes=true --option APT::Get::Download-Only=true --option Dir::State::status=$TARGET/var/lib/dpkg/status --option Dir::Etc::Preferences=$TARGET/etc/preferences
)

DBG () {
  print -r -- >&2 "$*"
}
abort () {
  ERR=$1 ; shift
  DBG "$*"
  exit $ERR
}
ABORT () {
  abort 42 "$*"
}


cross-apt-get () {
  apt-get $APT_OPTIONS $@
}

cross-apt-install () {
  # cross-apt-get clean
  cross-apt-get -fuy install $PACKAGES
}

apt-install () {
  # cross-apt-get clean
  apt-get -fuy install $PACKAGES
}

in_target () { chroot $TARGET $@ }

mount_target_proc () {
  mount -t proc proc $TARGET/proc
}

install_packages () {
  in_target apt-get -fuy --fix-missing install $PACKAGES
}
install_lisp_packages () {
  in_target apt-get -fuy --fix-missing install $COMMON_LISP_PACKAGES
}

wipe_installation () {
  echo "Are you sure you want to erase the installation in ${TARGET} ?" > /dev/tty
  read -q Y
  [ y = $Y ] || ABORT "Not trying to erase anything without your confirmation."
  cd ${TARGET} || ABORT "Could not change directory to ${TARGET}"

  rm -rf bin boot debootstrap dev etc foo home initrd lib media mnt opt root sbin srv sys tmp usr var remote/usr remote/var/lib
  DBG "Kept precious stuff in var/cache/apt/ and var/cache/debconf/"
}
install_workarounds () {
  touch $TARGET/etc/shadow # for chage used by ssh, etc.
}
transfer_installation () {
  DIRS=( bin lib sbin usr var )
  OTHER_DIRS=( media mnt dev initrd proc remote tmp sys
		opt srv   etc home root boot )
  [ -n "$MNT" ] || abort 2 "No target mount point \$MNT defined"
  mount | grep "on $MNT type" > /dev/null || abort 2 "$MNT not mounted"
  cd $MNT || abort 2 "Cannot change to $MNT"
  mkdir -p $DIRS $OTHER_DIRS
  [ -n "$TARGET" ] || abort 2 "No target installation \$TARGET defined"
  cd $TARGET || abort 2 "Cannot change to $TARGET"
  rsync -aH --delete --delete-before $DIRS $MNT/
  echo "Don't forget to setup /etc. You may rsync -a $TARGET/etc $MNT/etc"
}
do_it () {
  [ $UID = 0 ] || abort 2 "Must be root!"
  [ -x /usr/local/bin/qemu-arm ] || make_qemu_arm
  register_qemu_arm
  setup_directories
  install_qemu_arm
  bootstrap # --download-only
  extract_downloaded_debs
  mount_target_proc
  in_target dpkg --configure -a
  in_target apt-get update
  in_target apt-get -fuy --fix-missing install
  setup_sources.list
  install_workarounds
  in_target apt-get update
  in_target apt-get -fuy --fix-missing dist-upgrade
  install_packages
  in_target localepurge
}

PACKAGE_SELECTION

exec $@ ; exit


##### DOCUMENTATION BELOW #####

### See this page on the Wiki:
http://jornada820.sourceforge.net/wiki/index.php/Debian%20on%20the%20Jornada%20820

### You can install relevant packages this way:
apt-get install debootstrap qemu

### If not running debian, you can get debootstrap here:
http://people.debian.org/~blade/install/debootstrap

### Information about Debian ARM
http://www.chocky.org/linux/

### Here is one post that inspired me:
[lessdisks] cross architecture support
http://lists.freegeek.org/pipermail/lessdisks/2004-July/000237.html

### More links ###
http://radiolivre.org/darksnow/jornada/
http://www-jcsu.jesus.cam.ac.uk/~mma29/debian-arm/
http://www.tuxscreen.net/wiki/view/pivot_root_to_debian-ARM

### BEWARE(!) ###
cardmgr may oops if you keep the include lines that are included by default in
/etc/pcmcia/config.opts
Be sure to clear the content of this file.

