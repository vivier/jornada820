#!/bin/sh
# $Id: functions,v 1.25 2005/07/25 09:09:15 fare Exp $
# Shell functions to ease your life at the initrd debug command prompt
# Use the shell script /etc/please

localfunctions () {
  [ -f /etc/functions.local ] && . /etc/functions.local
}
re () {
  # RE-REad RenE's Runtime-Environment
  . /etc/functions
  localfunctions
}

ping () {
  # avoid uninterruptible ping when console is broken
  # unhappily, busybox's ash has the builtin take precedence over the function!
  /bin/ping -c 5 $@
}

mcs () {
  # my console settings: visible cursor, latin1 encoding, normal colors, bold.
  echo -ne '\033[?2c\033(B\033[m' # \033[1m ]])]
}
mcsv () { # my console settings for vt #n
  mcs > /dev/vc/${1:-1}
}

latin () { # ???
  # See /usr/src/linux/Documentation/unicode.txt
  # magic letter: B (latin1) 0 (DEC VT100 gfx) U (ibm cp437) K (user defined)
  # for some reason, this puts the terminal in black on black, so we reset it.
  echo -ne "\\033(?${1:-B}\\033[m"
}
cursor () {
  # See http://www.linux.org/docs/ldp/howto/Framebuffer-HOWTO-5.html#ss5.9
  echo -ne "\\033[?${1:-2}c"
}


LOG () {
  LOG_T "$@" ; LOG_C "$@"
}
LOG_C () {
  echo "$@" >&2
}
LOG_T () {
  opts=""
  case "$1" in
    -*) opts="$1" ; shift ;;
  esac
  echo $opts "$$ $(date +'%Y-%m-%d %H:%M:%S'): $@" >> /tmp/log
}
DO () {
  LOG "$@" ; "$@" 2>&1 | tee -a /tmp/log
}
DO_C () {
  LOG_C "$@" ; "$@"
}
DO_T () {
  LOG_T "$@" ; "$@" >> /tmp/log 2>&1 
}
ABORT () {
  if [ -n "$1" ] ; then
    LOG "$1"
  fi
  if [ 1 = $$ ] ; then
    exec_sh
  else
    exit ${2:-42}
  fi
}
CHECK () {
  # Check whether what we want is OK
  ERR="${3:-Something is wrong about the target filesystem.}
Stopping before we do a big mistake."
  LOG_T -n "Checking: $1 ... "
  if eval "$1" ; then
    LOG_T "ok"
  else
    if [ -n "$2" ] ; then
      LOG_T -n "failed. Taking a corrective measure: "
      eval "DO_T $2"
      eval "$1" ||
      ABORT "$ERR" ${4:-42}
    else
      ABORT "$ERR" ${4:-42}
    fi
  fi
}

ascii_table () {
  if [ -z "$ASCII_TABLE" ] ; then
    ASCII_TABLE="$(
      i=32 ; while [ $i -lt 256 ] ; do
	case $i in
	  ?|[12][0-9]|3[01]|127|155) j=' ' ;;
	  *) j=$(eval "echo -ne '\\$(printf %03o $i)'") ;;
	esac
	printf "%02x:%c " "$i" "$j"
	i=$(($i+1))
	#if [ $(($i % 16)) = 0 ] ; then echo ; fi 
      done )"
  fi
  export ASCII_TABLE
  echo "$ASCII_TABLE"
}

link_applets () {
  DO_T rm -f /linuxrc # /etc/init
  DO_T /bin/busybox --install -s
  DO_T ln -s ../etc/please /bin/please
}

ensure_tmp () {
  DO_T mkdir -p tmp
  CHECK '[ -d tmp ]' \
      '' \
      "Cannot ensure existence of $PWD/tmp directory."
}

ensure_proc () {
CHECK '[ -d proc ]' \
      'mkdir proc' \
      "Cannot make a $PWD/proc directory node."
CHECK '[ -f proc/cpuinfo ]' \
      'mount none proc -t proc' \
      "Cannot mount the $PWD/proc partition."
}

ensure_dev () {
CHECK '[ -d dev ]' \
      'mkdir dev' \
      "Cannot make a $PWD/dev directory node."
CHECK '[ -c dev/console ]' \
      'mount devfs dev -t devfs' \
      "Cannot mount the $PWD/dev partition."
}

ensure_shm () {
CHECK '[ -d dev/shm ]' \
      'mkdir -p dev/shm' \
      "Cannot make a $PWD/dev/shm directory node."
CHECK "grep -q $PWD/dev/shm /proc/mounts" \
      "mount tmpfs dev/shm -t tmpfs" \
      "Cannot mount the $PWD/dev/shm partition."
DO_T mkdir -p dev/shm/tmp dev/shm/var dev/shm/var/run dev/shm/var/lock
}

ensure_shm_tmp () {
  CHECK "[ -h tmp -o -d tmp ]" \
	"ln -s dev/shm/tmp tmp" \
	"Cannot ensure existence of $PWD/tmp directory."
}

my_linuxrc () {
  echo "We're in my_linuxrc! PID=$$" >> /tmp/log
  ps >> /tmp/log

  DO_T cd /
  DO_T mkdir -p /tmp
  LOG "Mounting proc and dev"
  ensure_proc
  ensure_dev

  # make symlinks for all those busybox applications
  LOG "Linking busybox applets"
  link_applets

  # get date from WinCE (?)
  : windate

  # Fallback plan: busybox's linuxrc
  ABORT () {
    if [ -n "$1" ] ; then
      LOG "$1"
    fi
    LOG "Fallback plan: running busybox on the initial ramdisk."
    banner
    LOG_C "This is a single-user shell with PID=$$.
If using the bootimage standalone, have busybox manage your consoles with:
	standalone
Otherwise, you may setup your rootfs on CF, then invoke function:
	rootfs
"
    exec_sh
  }

  try_pivot_root

  ABORT "Abnormal return from try_pivot_root."
}
standalone () {
  exec /linuxrc
}
rootfs () {
  try_pivot_root
}

linkme () { (
  cd /mnt/linux
  for i in etc/* usr/* lib/* ; do
    [ -e /$i ] || DO_T ln -s /mnt/linux/$i /$i
  done
  for i in bin/* ; do
    DO_T ln -s /mnt/linux/$i /usr/bin/
  done
) }
CET () { if [ -d /usr/share/zoneinfo ] ; then
  export TZ=Europe/Paris ; else export TZ=CET-1CEST ; fi ; }
PST () { if [ -d /usr/share/zoneinfo ] ; then
  export TZ=US/Pacific ; else export TZ=PST+8PDT ; fi ; }
EST () { if [ -d /usr/share/zoneinfo ] ; then
  export TZ=US/Eastern ; else export TZ=EST+5EDT ; fi ; }

nameserver () { (
  for i in $2 ; do echo search $i ; done
  for i in $1 ; do echo nameserver $i ; done
 ) > /etc/resolv.conf
}

nonet0 () {
  umount -a -t nfs
  ifconfig eth0 down
}
net0 () {
  hostname mildendo
  ifconfig eth0 192.168.0.16 netmask 255.255.255.0 broadcast 192.168.0.255
  ifconfig lo 127.0.0.1
  route add default gw 192.168.0.1
  rdate 192.168.0.3
  nameserver 192.168.0.1
  CET
  export DISTCC_HOSTS=192.168.0.3 CC="distcc arm-linux-gcc" CFLAGS="-Os -fomit-frame-pointer"
}
nbdswap () {
  # See http://www.it.uc3m.es/~ptb/nbd/
  mknod /dev/nb0 b 43 0
  nbd-client 192.168.0.3 665 /dev/nb0 -swap
  swapon /dev/nb0
  : nbd-client -d /dev/nb0
}

udhcp () {
  # http://udhcp.busybox.net/README.udhcpc
  DEVICE=${1:-eth0}
  ifconfig lo 127.0.0.1
  ifconfig $DEVICE > /dev/urandom
  udhcpc -H ${hostname:-j820} -n -f -q -s /etc/udhcpc.sh -i $DEVICE
}

change_root () {
  # See /usr/src/linux/Documentation/initrd.txt
  PARTNUM=${1:-3} # Partition with root disk in /dev/hda. Default: hda3
  : DO_T cardmgr -o
  # /dev/hda1 = 0x301, /dev/hda2 = 0x302, etc
  echo $(( 768 + $PARTNUM )) > /proc/sys/kernel/real-root-dev
  #cat /proc/sys/kernel/real-root-dev
  #cat /proc/cmdline
}

exec_sh () {
    exec /bin/busybox -sh < dev/vc/1 > dev/vc/1 2>&1 $@
}

no_noautomount_p () {
  # create a file or directory noautomount on your WinCE FAT partition
  # to prevent the boot disk image from automounting your rootfs.
  N="$NO_NOAUTOMOUNT"
  no_noautomount
  [ -n "$N" ] && return 0
  R=0
  [ -d /mnt/dos ] || mkdir -p /mnt/dos
  DOSPART=$(fdisk -l /dev/hda | grep FAT | head -1 | cut -d" " -f1 )
  if [ -n "$DOSPART" ] ; then
    DO_T mount $DOSPART /mnt/dos -t vfat -o ro
    if [ -e /mnt/dos/noautomount ] ; then
      LOG_T "Found file or directory /noautomount on VFAT partition."
      R=1
    fi
    DO_T umount /mnt/dos
  fi
  return $R
}

no_noautomount () {
  export NO_NOAUTOMOUNT=1
}

ensure_no_noautomount () {
  # Remove any noautomount flag
  [ -d /mnt/dos ] || mkdir -p /mnt/dos
  DOSPART=$(fdisk -l /dev/hda | grep FAT | head -1 | cut -d" " -f1 )
  if [ -n "$DOSPART" ] ; then
    DO_T mount $DOSPART /mnt/dos -t vfat -o rw,noatime
    [ -d /mnt/dos/noautomount ] && DO_T rmdir /mnt/dos/noautomount
    [ -f /mnt/dos/noautomount ] && DO_T rm -f /mnt/dos/noautomount
    DO_T umount /mnt/dos
  fi
}

ensure_linuxpartition () {
  PART=$(fdisk -l /dev/hda | grep '83  Linux' | head -1 | cut -d" " -f1 )
  [ -n "$PART" ] ||
  ABORT "Cannot find a Linux partition. Please make one with fdisk."
  CHECK '[ -d /mnt/linux ]' \
	'mkdir -p /mnt/linux' \
	'Cannot make /mnt/linux directory.'
  CHECK "grep -q '$PART /mnt/linux' /proc/mounts" \
	"mount $PART /mnt/linux -o noatime,ro" \
	"Cannot mount the target partition $PART to /mnt/linux."
  PARTNUM="$(echo $PART | cut -c9-)"
  change_root $PARTNUM # necessary if we're not PID=1
}

try_fsck () {
  FSTYPE="$(< /proc/mounts grep $PART | cut -d' ' -f 3)"
  cd /mnt/linux
  FSCK=sbin/fsck.$FSTYPE
  ensure_dev
  ensure_proc
  if [ -x ./$FSCK ] ; then
    LOG chroot $PWD /$FSCK -y $PART
    chroot $PWD /$FSCK -y $PART
  fi
  umount dev
  umount proc
  cd /
  umount $PART
  sync
  # here we should flush buffers, if only we know how to do that...
}

has_init_p () {
  # [ -x linuxrc ] ||
  [ -x sbin/init ] || [ -x etc/init ] || [ -x bin/init ] ||
  [ -x bin/sh ]
}
do_init () {
  if [ 1 = "$$" ] ; then
    [ -x sbin/init ] && exec ./sbin/init $INIT_ARGS
    [ -x etc/init ] && exec ./etc/init $INIT_ARGS
    [ -x bin/init ] && exec ./bin/init $INIT_ARGS
  else
    LOG "PID=$$, not 1, so let's not try to exec init."
  fi
  [ -x bin/sh ] && exec ./bin/sh
}

ensure_partition_bootable () {
  mount -o rw,noatime $PART /mnt/linux
  cd /mnt/linux
  for i in bin sbin usr/bin usr/sbin etc etc/pcmcia \
	   tmp var/run initrd lib/modules mnt ; do
    CHECK "[ -h $i -o -d $i ]" "mkdir -p $i" \
	"Cannot ensure directory /$i on target partition"
  done
  if [ -f etc/functions ] && ! cmp -s etc/functions /etc/functions ; then
    cp /etc/functions etc/functions.new
  fi
  for i in bin/busybox sbin/cardmgr sbin/cardctl \
	etc/functions etc/please etc/udhcpc.sh \
	etc/passwd etc/group etc/fstab etc/inittab \
	etc/resolv.conf \
	etc/pcmcia/shared etc/pcmcia/config etc/pcmcia/config.opts \
	etc/pcmcia/ide etc/pcmcia/ide.opts \
	etc/pcmcia/network etc/pcmcia/network.opts
  do
    CHECK "[ -f $i ]" \
	"cp -a /$i $i" \
	"Cannot ensure /$i on target partition."
  done
  CHECK "grep -q pivot_root_part2 etc/functions" \
	"cp -af /etc/functions etc/functions" \
	"Cannot ensure pivot_root_part2 in target /etc/functions"
  LOG_T "Ensuring a working bin/sh..."
  CHECK "[ -x bin/sh ]" \
	"chroot . /bin/busybox --install -s" \
	"Cannot ensure a working /bin/sh on target."
  LOG_T "Installing kernel modules..."
  MODULES="lib/modules/$(uname -r)"
  CHECK "[ -d $MODULES ]" "tar jxf /modules.tar.bz2" \
	"Cannot ensure kernel modules on target partition"
}

try_pivot_root () {
  # NB: So as to be able to free the ramdisk's memory,
  # this script must be run as the only process, #1,
  # either from linuxrc of from a single-user mode shell.

  LOG "Let's pivot_root if we can."
  DO_T cd /
  DO_T umount -a -n
  ensure_tmp ; ensure_proc ; ensure_dev # necessary for many things
  LOG "Checking for a CF memory card..."
  CHECK 'dd if=/dev/hda count=1 of=/dev/null 2> /dev/null' \
	'cardmgr -o ; sleep 1' \
	"Cannot find a CF disk."
  LOG "Checking for noautomount request..."
  CHECK no_noautomount_p '' \
	"User requested noautomount - not trying to mount a Linux partition."
  LOG "Trying to mount a Linux partition..."
  ensure_linuxpartition
  LOG "Trying to fsck the Linux partition..."
  try_fsck
  LOG "Ensuring the target partition is bootable..."
  ensure_partition_bootable
  do_pivot_root
}

do_pivot_root () {
  if [ 1 = $$ ] ; then
    ensure_proc
    ensure_dev
    ensure_shm
    ensure_shm_tmp
    LOG_T "Changing current I/O to new /dev"
    exec < dev/console > dev/console 2>&1
    LOG_T "Switching log file"
    mv /tmp/log tmp/log
    ln -s ../$PWD/tmp/log /tmp/log
    LOG "Switching root partition..."
    pivot_root . initrd
    LOG_T "Jumping to the other side"
    exec chroot . ./bin/sh ./etc/please pivot_root_part2 \
	< dev/console > dev/console 2>&1
  else
    DO_T cd /
    DO_T umount /mnt/linux
    LOG "PID = $$ != 1; Let's trust linux/init/do_mount.c for the sequel ..."
    exit 0
  fi
}

pivot_root_part2 () {
  LOG "Made it to the other side!"
  LOG "Ensuring dev and proc"
  ensure_dev ; ensure_proc
  LOG "Cleaning filedescriptors"
  DO_T cd /
  export TERM=linux
  exec < dev/console > dev/console 2>&1
  DO_T cat /proc/mounts
  DO_T ps
  LOG "Unmounting dev and proc from initrd"
  DO_T umount initrd/dev
  DO_T umount initrd/proc
  LOG "Freeing resources occupied by the initrd..."
  DO_T umount initrd
  # problem: blockdev (part of the util-linux debian package) isn't in busybox
  DO_T blockdev --flushbufs /dev/rd/0 # /dev/ram0
  if [ 1 = $$ ] ; then
    LOG "Jumping into the rootfs' init process..."
    do_init
  else
    LOG "PID = $$ != 1; Let's trust linux/init/do_mount.c for the sequel ..."
    exit 0
  fi
}

banner () {
  echo -e '\033[?2c\033(B\033[m\033[1m'
  echo -e 'Welcome to Linux for the HP Jornada 820.\033[m'
}
sysinit () {
  # replaces the /etc/init.d/rcS script -- see /etc/inittab
  hostname ${hostname:-j820}
  #banner
  klogd -c 1
  syslogd -O /dev/vc/10
  cardmgr
  telnetd
}

setdate () {
(  eval $@
  : ${DAY:=4} ${MONTH:=7} ${YEAR:=2004} ${HOUR:=23} ${MINUTE:=5} ${SECOND:=42}
  busybox date -s $(printf %02d%02d%02d%02d%04d $MONTH $DAY $HOUR $MINUTE $YEAR)
  # GNU date -s $(printf "%04d-%02d-%02d %02d:%02d:%02d" $YEAR $MONTH $DAY $HOUR $MINUTE $SECOND)
)
}
peek_halfword () {
  dd if=/dev/mem bs=1 skip=$1 count=2 2> /dev/null | od -i | cut -c9-
}
windate () {
  # busybox can't seek to over 2GB because it cannot use 64-bit llseek (???)
  ENCTIME=$(dd if=/dev/mem bs=16 skip=$((0xc004fe0)) count=1 | od -i)
  YEAR=$(  echo $ENCTIME | cut -c 28-34)
  #YEAR=$(   peek_halfword $((0xc004fe04)) )
  #MONTH=$(  peek_halfword $((0xc004fe06)) )
  #DAY=$(    peek_halfword $((0xc004fe0a)) )
  #HOUR=$(   peek_byte     $((0xc004fe0c)) ) ???
  #MINUTE=$( peek_byte     $((0xc004fe0d)) ) ???
  HOUR=$(date +%H)
  MINUTE=$(date +%M)
  SECOND=0
  setdate
  DO hwclock -w
}
getdate () {
  DATE="$(date +"YEAR=%Y MONTH=%m DAY=%d HOUR=%H MINUTE=%M SECOND=%S TZ=$TZ")"
  echo "$DATE"
  eval "$DATE"
}
mnt1 () {
  mount /dev/hda1 /mnt -t vfat -o shortname=winnt,umask=077,noatime
}
umnt () {
  umount /mnt
}
up () { cd .. ; }
